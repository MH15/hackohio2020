{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","style","width","margin","fontSize","color","rotate","iconComponent","setIconComponent","webSocket","useRef","status","setStatus","useEffect","current","WebSocket","addEventListener","event","console","log","data","json","JSON","parse","show","setShow","handleClose","className","Modal","onHide","Header","closeButton","Title","Body","href","Footer","Button","variant","onClick","background","borderColor","Container","fluid","backgroundColor","paddingBottom","Row","Col","Navbar","bg","expand","text","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","Card","Img","src","Text","marginBottom","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89c84a6c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport {\n  Container,\n  Row,\n  Col,\n  Navbar,\n  Nav,\n  NavDropdown,\n  Form,\n  FormControl,\n  Button,\n  Card,\n  Modal\n\n} from \"react-bootstrap\"\nimport React, { useState, useEffect, useRef } from 'react';\nimport IosRefresh from \"react-ionicons/lib/IosRefresh\"\nimport LogoGithub from \"react-ionicons/lib/LogoGithub\"\nimport MdPause from \"react-ionicons/lib/MdPause\"\nimport MdCheckmarkCircle from \"react-ionicons/lib/MdCheckmarkCircle\"\nimport IosCloseCircle from \"react-ionicons/lib/IosCloseCircle\"\nimport io from \"socket.io-client\";\nconst ENDPOINT = \"localhost:3210\";\n\n\n/*\nIosCheckmarkCircle\nMdCheckmarkCircle\nIosRefresh\n*/\n\n\n\n\nfunction App() {\n  const [iconComponent, setIconComponent] = useState(<MdPause style={{ width: '100%', margin: '0 auto' }} fontSize=\"60px\" color=\"#347eff\" rotate={false} />)\n\n\n  const webSocket = useRef(null);\n\n  // let socket = io(\"127.0.0.1:3210\")\n  // socket.on(\"connect\", (data) => {\n  //   console.log(data);\n  // })\n\n  const [status, setStatus] = useState(\"inactive\")\n  useEffect(() => {\n    webSocket.current = new WebSocket('ws://localhost:8765');\n    // Connection opened\n    webSocket.current.addEventListener('open', function (event) {\n      console.log(\"connected to server\")\n    });\n    webSocket.current.addEventListener(\"message\", data => {\n      let json = JSON.parse(data.data)\n      console.log(json);\n      switch (json[\"type\"]) {\n        case \"status\":\n          switch (json[\"value\"]) {\n            case \"inactive\":\n              setIconComponent(<MdPause style={{ width: '100%', margin: '0 auto' }} fontSize=\"60px\" color=\"#347eff\" rotate={false} />)\n              break\n            case \"working\":\n              setIconComponent(<IosRefresh style={{ width: '100%', margin: '0 auto' }} fontSize=\"60px\" color=\"#347eff\" rotate={true} />)\n              break\n            case \"success\":\n              setIconComponent(<MdCheckmarkCircle style={{ width: '100%', margin: '0 auto' }} fontSize=\"60px\" color=\"green\" rotate={false} />)\n              break\n            case \"failure\":\n              setIconComponent(<IosCloseCircle style={{ width: '100%', margin: '0 auto' }} fontSize=\"60px\" color=\"red\" rotate={false} />)\n              break\n          }\n          setStatus(json[\"value\"])\n      }\n      // setStatus(data);\n    });\n  }, []);\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n\n\n  return (\n    <div className=\"App\">\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Face Mask Recognition</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          A project for <a href=\"https://hack.osu.edu/2020/\">HackOH/IO 2020</a>.\n\n        </Modal.Body>\n        <Modal.Footer>\n          <Button href=\"https://github.com/mh15/hackohio2020\" variant=\"primary\" onClick={handleClose} style={{ background: \"hsl(210, 12.2%, 16.1%)\", borderColor: \"hsl(210, 12.2%, 16.1%)\" }}>\n            <LogoGithub color={\"white\"} />\n          </Button>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n\n      <Container fluid style={{\n        backgroundColor: '#007bff',\n        paddingBottom: '30px'\n      }}>\n        <Row>\n          <Col>\n            <Navbar bg=\"primary\" expand=\"lg\" text=\"light\">\n              <Navbar.Brand href=\"#home\">Face Mask Recognition</Navbar.Brand>\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n              <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"ml-auto\">\n                  <Nav.Link onClick={handleShow}>About</Nav.Link>\n                </Nav>\n              </Navbar.Collapse>\n            </Navbar>\n          </Col>\n        </Row>\n\n\n        <Row>\n          <Col>\n            <Card bg={\"dark\"} text={\"light\"}>\n              <Card.Header>Video Stream</Card.Header>\n              <Card.Img variant=\"top\" src=\"/video_feed\" />\n              <Card.Body>\n                <Card.Title>Card Title</Card.Title>\n                <Card.Text>\n                  Some quick example text to build on the card title and make up the bulk of\n                  the card's content.\n    </Card.Text>\n                <Button variant=\"primary\">Go somewhere</Button>\n              </Card.Body>\n            </Card>\n          </Col>\n\n\n          <Col>\n            <Row style={{ marginBottom: '20px' }}>\n              <Card style={{ width: '100%' }} bg={\"dark\"} text={\"light\"}>\n                <Card.Header>System Status</Card.Header>\n                <Card.Body>\n                  <Card.Text style={{ textAlign: 'center' }}>\n                    {iconComponent}\n\n                    {status}\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            </Row>\n\n            <Row>\n              <Card bg={\"dark\"} text={\"light\"}>\n\n                <Card.Header>Statistics</Card.Header>\n                <Card.Body>\n                  <Card.Text>\n                    Some quick example text to build on the card title and make up the bulk of\n                    the card's content.\n    </Card.Text>\n                </Card.Body>\n              </Card>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}